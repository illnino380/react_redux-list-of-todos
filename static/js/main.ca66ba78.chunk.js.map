{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","api.ts","features/todos.ts","features/user.ts","app/store.ts","app/hooks.ts","app/selectors.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterActionType","TODO_ACTIONS","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","FILTER_ACTION_CREATORS","SetQuery","RemoveQuery","SetStatus","filterReducer","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","text","Error","getUser","userId","todos","isLoading","error","isLoadingActionCreator","getTodosActionCreator","loadTodosFromServerAction","dispatch","a","TODOS_ACTIONS","getTodos","loadTodos","todosReducer","todosState","setUser","user","USER_ACTIONS","userReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","CURRENT_TODOS_SELECTORS","USER_SELECTORS","FILTER_SELECTORS","TODOS_SELECTORS","todosFilteredByStatus","completed","filterTodosByStatus","title","toLowerCase","includes","TodoList","React","memo","props","length","className","map","id","classNames","onClick","handleSelectButton","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","TodoModal","currentUser","useEffect","href","email","name","App","filteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAgBYA,E,sDCICC,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OD9BPE,EAAsB,CAC1BC,MAAO,GACPC,OAAQ,Q,SAOEV,K,qBAAAA,E,2BAAAA,E,wBAAAA,M,KAcZ,IAcaW,EAdI,SAACF,GAAD,MAAoC,CACnDN,KAAMH,EAAiBY,SACvBR,QAASK,IAYEE,EATO,iBAA0B,CAC5CR,KAAMH,EAAiBa,cAQZF,EALK,SAACD,GAAD,MAAsC,CACtDP,KAAMH,EAAiBc,UACvBV,QAASM,IAqCIK,EA5BO,WAGT,IAFXT,EAEU,uDAFKE,EACfD,EACU,uCACV,OAAQA,EAAOJ,MACb,KAAKH,EAAiBY,SACpB,OAAO,2BACFN,GADL,IAEEG,MAAOF,EAAOH,UAGlB,KAAKJ,EAAiBa,YACpB,OAAO,2BACFP,GADL,IAEEG,MAAO,KAGX,KAAKT,EAAiBc,UACpB,OAAO,2BACFR,GADL,IAEEI,OAAQH,EAAOH,UAGnB,QACE,OAAOE,I,gCE9Db,SAASU,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GACJ,OAAKA,EAAIC,GAMFD,EAAIE,OALFF,EAAIG,OAAOL,MAAK,SAAAK,GACrB,MAAM,IAAIC,MAAMD,SAQnB,IAEME,EAAU,SAACC,GAAD,OAAoBf,EAAG,iBAAiBe,KCrBzDvB,EAAsB,CAC1BwB,MAAO,GACPC,WAAW,EACXC,MAAO,MAQHC,EAAyB,SAACF,GAAD,MAAyC,CACtE9B,KAAM,aACNC,QAAS6B,IAkBLG,EAAwB,SAACJ,GAAD,MAAoC,CAChE7B,KAAM,YACNC,QAAS4B,IAGLK,EAAyB,uCAAG,WAChCC,GADgC,eAAAC,EAAA,sEAI9BD,EAASH,GAAuB,IAJF,SDjBJnB,EAAY,UCiBR,OAMxBgB,EANwB,OAQ9BM,EAASF,EAAsBJ,IARD,gDAU9BM,EAzB+D,CACjEnC,KAAM,cACNC,QAuB8B,GAAD,eAVG,yBAY9BkC,EAASH,GAAuB,IAZF,4EAAH,sDAgBlBK,EAAgB,CAC3BC,SAAUL,EACVM,UAAWL,GAmCEM,EA5BM,WAGR,IAFXC,EAEU,uDAFUpC,EACpBD,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,YACH,OAAO,2BACFyC,GADL,IAEEZ,MAAM,YAAKzB,EAAOH,WAGtB,IAAK,aACH,OAAO,2BACFwC,GADL,IAEEX,UAAW1B,EAAOH,UAGtB,IAAK,cACH,OAAO,2BACFwC,GADL,IAEEV,MAAO3B,EAAOH,UAGlB,QACE,OAAOwC,ICtFPC,EAAU,SAACC,GAAD,MAAgC,CAC9C3C,KAAM,WACNC,QAAS0C,IAmBEC,EAZM,iBAAyB,CAC1C5C,KAAM,gBAWK4C,EARkB,SAAChB,GAC9B,8CAAO,WAAOO,GAAP,eAAAC,EAAA,sEACcT,EAAQC,GADtB,OACCe,EADD,OAGLR,EAASO,EAAQC,IAHZ,2CAAP,uDAgCaE,EAhBK,WAGd,IAFJ1C,EAEG,uDAFY,KACfC,EACG,uCACH,OAAQA,EAAOJ,MACb,IAAK,WACH,OAAOI,EAAOH,QAEhB,IAAK,cACH,OAAO,KAET,QACE,OAAOE,IC1CP2C,EAAcC,0BAAgB,CAClCC,YAAa9C,EACb+C,OAAQrC,EACRiB,MAAOW,EACPG,KAAME,IAGKK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,+CCfPC,GADoCC,IACcC,KCAlDC,EAFe,SAACvD,GAAD,OAAsBA,EAAM6C,aAQ3CW,EAFQ,SAACxD,GAAD,OAAsBA,EAAMwC,MASpCiB,EAHS,SAACzD,GAAD,OAAsBA,EAAM8C,OAAO3C,OAG5CsD,EAFU,SAACzD,GAAD,OAAsBA,EAAM8C,OAAO1C,QAuC7CsD,EA/BkB,SAAC1D,GAAD,OAAsBA,EAAM0B,MAAMC,WA+BpD+B,EA9Bc,SAAC1D,GAAD,OAAsBA,EAAM0B,MAAME,OA8BhD8B,EA5BiB,SAAC1D,GAC7B,IAAQ0B,EAAU1B,EAAM0B,MAAhBA,MACR,EAA0B1B,EAAM8C,OAAxB3C,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAeTuD,EAbsB,WAC1B,OAAQvD,GACN,IAAK,SACH,OAAOsB,EAAMoB,QAAO,SAAAlD,GAAI,OAAuB,IAAnBA,EAAKgE,aAEnC,IAAK,YACH,OAAOlC,EAAMoB,QAAO,SAAAlD,GAAI,OAAuB,IAAnBA,EAAKgE,aAEnC,QACE,OAAOlC,GAIiBmC,GAQ9B,MANuC,KAAV1D,EACzBwD,EAAsBb,QAAO,SAAAlD,GAAI,OACjCA,EAAKkE,MAAMC,cAAcC,SAAS7D,EAAM4D,kBAExCJ,G,OCpCOM,EAA4BC,IAAMC,MAAK,SAACC,GACnD,IAAQ1C,EAAU0C,EAAV1C,MAEFE,EAAQwB,EAAeM,GACvBb,EAAcO,EAAeG,GAC7BvB,EAAWqB,cAMjB,OACY,OAAVzB,EAEI,sCAEA,mCACoB,IAAjBF,EAAM2C,OAEH,mBAAGC,UAAU,0BAAb,iEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACG5C,EAAM6C,KAAI,SAAA3E,GACT,IACE4E,EAGE5E,EAHF4E,GACAV,EAEElE,EAFFkE,MACAF,EACEhE,EADFgE,UAGF,OACE,qBACE,UAAQ,OADV,UAIE,oBAAIU,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGV,GACC,sBAAMU,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IAAW,CACvB,mBAAoBb,EACpB,mBAAoBA,IAFtB,SAKGE,MAIL,oBAAIQ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVzE,KAAK,SACL6E,QAAS,kBArER,SAAC9E,GAC1BoC,EAASrC,EAAqBC,IAoES+E,CAAmB/E,IAJpC,SAME,sBAAM0E,UAAU,OAAhB,SACGzB,EACG,mBAAGyB,UAAU,qBACb,mBAAGA,UAAU,uBA/BlBE,gBCzDhBI,EAAuB,WAClC,IAAM5C,EAAWqB,cACXlD,EAAQiD,EAAeK,GACvBrD,EAASgD,EAAeK,GAc9B,OACE,uBACEa,UAAU,mBACVO,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGT,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRU,SArBiB,SAACF,GAC1B9C,EAAS3B,EAAiCyE,EAAMG,OAAOC,SAqB/CA,MAAO9E,EAHT,UAKE,wBAAQ8E,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGZ,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRzE,KAAK,OACLyE,UAAU,QACVa,YAAY,YACZD,MAAO/E,EACP6E,SAlCkB,SAACF,GACzB9C,EAAS3B,EAAgCyE,EAAMG,OAAOC,WAmClD,sBAAMZ,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGJ,KAAVnE,GACC,sBAAMmE,UAAU,gBAAgBc,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRxF,KAAK,SACLyE,UAAU,SACVI,QA3Cc,WACxB1C,EAAS3B,iBCjBAiF,G,MAAmB,kBAC9B,qBAAKhB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCGNiB,GAAsB,WACjC,IAAM1C,EAAcO,EAAeG,GAC7BiC,EAAcpC,EAAeI,GAC7BxB,EAAWqB,cAEX1B,EAA6B,OAAhBkB,IACF,OAAX2C,QAAW,IAAXA,OAAA,EAAAA,EAAahB,MAAO3B,EAAYpB,OAatC,OANAgE,qBAAU,WACR,OAAI5C,QAAJ,IAAIA,KAAapB,QACfO,EAASS,EAAoCI,EAAYpB,WAE1D,CAACoB,IAGF,sBAAKyB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd3C,EACI,cAAC,EAAD,IAED,sBAAK2C,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYzB,EAAY2B,MAIxB,wBACE3E,KAAK,SACLyE,UAAU,SACV,UAAQ,cACRI,QAhCW,WACvB1C,EAASrC,KACTqC,EAASS,WAkCD,sBAAK6B,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGzB,EAAYiB,QAGf,oBAAGQ,UAAU,QAAQ,UAAQ,aAA7B,UACGzB,EAAYe,UAET,wBAAQU,UAAU,mBAAlB,kBAIA,wBAAQA,UAAU,kBAAlB,qBAKH,OAECkB,EAEI,mBAAGE,KAAI,iBAAYF,EAAYG,OAA/B,SACGH,EAAYI,OAGf,yBC/DTC,GAAgB,WAC3B,IAAM7D,EAAWqB,cACXyC,EAAgB1C,EAAeM,GAC/B/B,EAAYyB,EAAeM,GAC3Bb,EAAcO,EAAeG,GAMnC,OAJAkC,qBAAU,WACRzD,EAASE,EAAcE,aACtB,IAGD,qCACE,qBAAKkC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACG3C,EAEG,cAAC,EAAD,IAEA,cAACsC,EAAD,CAAUvC,MAAOoE,aAO5BjD,GAAe,cAAC,GAAD,QCtChBkD,GAAO,kBACX,cAAC,IAAD,CAAUhD,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,SAKNiD,IAASC,OAAO,cAAC,GAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.ca66ba78.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\ninterface State {\n  query: string,\n  status: string,\n}\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum FilterActionType {\n  SetQuery = 'query/SET',\n  RemoveQuery = 'query/REMOVE',\n  SetStatus = 'status/SET',\n}\n\ntype SetQueryAction = Action<FilterActionType.SetQuery, string>;\ntype RemoveQueryAction = BaseAction<FilterActionType.RemoveQuery>;\ntype SetStatusAction = Action<FilterActionType.SetStatus, string>;\n\ntype FilterActions = SetQueryAction\n| RemoveQueryAction\n| SetStatusAction;\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: FilterActionType.SetQuery,\n  payload: query,\n});\n\nconst removeQuery = (): RemoveQueryAction => ({\n  type: FilterActionType.RemoveQuery,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: FilterActionType.SetStatus,\n  payload: status,\n});\n\nexport const FILTER_ACTION_CREATORS = {\n  setQuery,\n  removeQuery,\n  setStatus,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: FilterActions,\n): State => {\n  switch (action.type) {\n    case FilterActionType.SetQuery:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case FilterActionType.RemoveQuery:\n      return {\n        ...state,\n        query: '',\n      };\n\n    case FilterActionType.SetStatus:\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const TODO_ACTIONS = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        return res.text().then(text => {\n          throw new Error(text);\n        });\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Dispatch } from 'redux';\nimport { getTodos } from '../api';\nimport { Todo } from '../types/Todo';\n\ninterface State {\n  todos: Todo[],\n  isLoading: boolean,\n  error: string | null,\n}\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n  error: null,\n};\n\ntype IsLoadingAction = {\n  type: 'todos/LOAD'\n  payload: boolean,\n};\n\nconst isLoadingActionCreator = (isLoading: boolean):IsLoadingAction => ({\n  type: 'todos/LOAD',\n  payload: isLoading,\n});\n\ntype ErrorAction = {\n  type: 'todos/ERROR'\n  payload: string,\n};\n\nconst errorActionCreator = (errorMessage: string): ErrorAction => ({\n  type: 'todos/ERROR',\n  payload: errorMessage,\n});\n\ntype GetTodosAction = {\n  type: 'todos/GET',\n  payload: Todo[],\n};\n\nconst getTodosActionCreator = (todos: Todo[]): GetTodosAction => ({\n  type: 'todos/GET',\n  payload: todos,\n});\n\nconst loadTodosFromServerAction = async (\n  dispatch: Dispatch<Action>,\n) => {\n  try {\n    dispatch(isLoadingActionCreator(true));\n\n    const todos = await getTodos();\n\n    dispatch(getTodosActionCreator(todos));\n  } catch (error) {\n    dispatch(errorActionCreator(`${error}`));\n  } finally {\n    dispatch(isLoadingActionCreator(false));\n  }\n};\n\nexport const TODOS_ACTIONS = {\n  getTodos: getTodosActionCreator,\n  loadTodos: loadTodosFromServerAction,\n};\n\ntype Action = GetTodosAction\n| IsLoadingAction\n| ErrorAction;\n\nconst todosReducer = (\n  todosState: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/GET':\n      return {\n        ...todosState,\n        todos: [...action.payload],\n      };\n\n    case 'todos/LOAD':\n      return {\n        ...todosState,\n        isLoading: action.payload,\n      };\n\n    case 'todos/ERROR':\n      return {\n        ...todosState,\n        error: action.payload,\n      };\n\n    default:\n      return todosState;\n  }\n};\n\nexport default todosReducer;\n","import { Dispatch } from 'redux';\nimport { getUser } from '../api';\nimport { User } from '../types/User';\n\ntype SetUserAction = {\n  type: 'user/SET',\n  payload: User,\n};\n\nconst setUser = (user: User): SetUserAction => ({\n  type: 'user/SET',\n  payload: user,\n});\n\ntype RemoveUserAction = {\n  type: 'user/REMOVE',\n};\n\nconst removeUser = (): RemoveUserAction => ({\n  type: 'user/REMOVE',\n});\n\nconst loadUserByIdFromServer = (userId: number) => {\n  return async (dispatch: Dispatch<SetUserAction>) => {\n    const user = await getUser(userId);\n\n    dispatch(setUser(user));\n  };\n};\n\nexport const USER_ACTIONS = {\n  setUser,\n  removeUser,\n  loadUserByIdFromServer,\n};\n\ntype State = User | null;\ntype Action = SetUserAction | RemoveUserAction;\n\nconst userReducer = (\n  state: State = null,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'user/SET':\n      return action.payload;\n\n    case 'user/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\nimport userReducer from '../features/user';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n  user: userReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from './store';\n\nconst currentTodoSelector = (state: RootState) => state.currentTodo;\n\nexport const CURRENT_TODOS_SELECTORS = {\n  currentTodo: currentTodoSelector,\n};\n\nconst userSelector = (state: RootState) => state.user;\n\nexport const USER_SELECTORS = {\n  user: userSelector,\n};\n\nconst querySelector = (state: RootState) => state.filter.query;\nconst statusSelector = (state: RootState) => state.filter.status;\n\nexport const FILTER_SELECTORS = {\n  query: querySelector,\n  status: statusSelector,\n};\n\nconst todosSelector = (state: RootState) => state.todos.todos;\nconst isLoadingTodosSelector = (state: RootState) => state.todos.isLoading;\nconst errorTodosSelector = (state: RootState) => state.todos.error;\n\nconst filteredTodosSelector = (state: RootState) => {\n  const { todos } = state.todos;\n  const { query, status } = state.filter;\n\n  const filterTodosByStatus = () => {\n    switch (status) {\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n\n      default:\n        return todos;\n    }\n  };\n\n  const todosFilteredByStatus = filterTodosByStatus();\n\n  const filteredTodosByQuery = query !== ''\n    ? todosFilteredByStatus.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ))\n    : todosFilteredByStatus;\n\n  return filteredTodosByQuery;\n};\n\nexport const TODOS_SELECTORS = {\n  todos: todosSelector,\n  isLoading: isLoadingTodosSelector,\n  error: errorTodosSelector,\n  filteredTodos: filteredTodosSelector,\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { TODO_ACTIONS } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\nimport { CURRENT_TODOS_SELECTORS, TODOS_SELECTORS } from '../../app/selectors';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = React.memo((props) => {\n  const { todos } = props;\n\n  const error = useAppSelector(TODOS_SELECTORS.error);\n  const currentTodo = useAppSelector(CURRENT_TODOS_SELECTORS.currentTodo);\n  const dispatch = useDispatch();\n\n  const handleSelectButton = (todo: Todo) => {\n    dispatch(TODO_ACTIONS.setTodo(todo));\n  };\n\n  return (\n    error !== null\n      ? (\n        <p>error</p>\n      ) : (\n        <>\n          {todos.length === 0\n            ? (\n              <p className=\"notification is-warning\">\n                There are no todos matching current filter criteria\n              </p>\n            ) : (\n              <table className=\"table is-narrow is-fullwidth\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n\n                    <th>\n                      <span className=\"icon\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    </th>\n\n                    <th>Title</th>\n                    <th> </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {todos.map(todo => {\n                    const {\n                      id,\n                      title,\n                      completed,\n                    } = todo;\n\n                    return (\n                      <tr\n                        data-cy=\"todo\"\n                        key={id}\n                      >\n                        <td className=\"is-vcentered\">{id}</td>\n                        <td className=\"is-vcentered\">\n                          {completed && (\n                            <span className=\"icon\" data-cy=\"iconCompleted\">\n                              <i className=\"fas fa-check\" />\n                            </span>\n                          )}\n                        </td>\n\n                        <td className=\"is-vcentered is-expanded\">\n                          <p className={classNames({\n                            'has-text-success': completed,\n                            'has-text-danger': !completed,\n                          })}\n                          >\n                            {title}\n                          </p>\n                        </td>\n\n                        <td className=\"has-text-right is-vcentered\">\n                          <button\n                            data-cy=\"selectButton\"\n                            className=\"button\"\n                            type=\"button\"\n                            onClick={() => handleSelectButton(todo)}\n                          >\n                            <span className=\"icon\">\n                              {currentTodo\n                                ? <i className=\"far fa-eye-slash\" />\n                                : <i className=\"far fa-eye\" />}\n                            </span>\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n        </>\n      )\n  );\n});\n","import React, { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { FILTER_SELECTORS } from '../../app/selectors';\nimport { FILTER_ACTION_CREATORS } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(FILTER_SELECTORS.query);\n  const status = useAppSelector(FILTER_SELECTORS.status);\n\n  const handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(FILTER_ACTION_CREATORS.setStatus(event.target.value));\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(FILTER_ACTION_CREATORS.setQuery(event.target.value));\n  };\n\n  const handleClearButton = () => {\n    dispatch(FILTER_ACTION_CREATORS.removeQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearButton}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { TODO_ACTIONS } from '../../features/currentTodo';\nimport { CURRENT_TODOS_SELECTORS, USER_SELECTORS } from '../../app/selectors';\nimport { Loader } from '../Loader';\nimport { USER_ACTIONS } from '../../features/user';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(CURRENT_TODOS_SELECTORS.currentTodo);\n  const currentUser = useAppSelector(USER_SELECTORS.user);\n  const dispatch = useDispatch();\n\n  const isLoading = (currentTodo === null)\n    || (currentUser?.id !== currentTodo.userId);\n\n  const handleCloseModal = () => {\n    dispatch(TODO_ACTIONS.removeTodo());\n    dispatch(USER_ACTIONS.removeUser());\n  };\n\n  useEffect(() => {\n    if (currentTodo?.userId) {\n      dispatch(USER_ACTIONS.loadUserByIdFromServer(currentTodo.userId));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo.completed\n                  ? (\n                    <strong className=\"has-text-success\">\n                      Done\n                    </strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">\n                      Planned\n                    </strong>\n                  )}\n\n                {' by '}\n                {\n                  currentUser\n                    ? (\n                      <a href={`mailto:${currentUser.email}`}>\n                        {currentUser.name}\n                      </a>\n                    )\n                    : 'Anonimous'\n                }\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { CURRENT_TODOS_SELECTORS, TODOS_SELECTORS } from './app/selectors';\nimport { TODOS_ACTIONS } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const filteredTodos = useAppSelector(TODOS_SELECTORS.filteredTodos);\n  const isLoading = useAppSelector(TODOS_SELECTORS.isLoading);\n  const currentTodo = useAppSelector(CURRENT_TODOS_SELECTORS.currentTodo);\n\n  useEffect(() => {\n    dispatch(TODOS_ACTIONS.loadTodos);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList todos={filteredTodos} />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}